{"version":3,"sources":["components/SearchBar/SearchBar.components.js","components/Track/Track.components.js","components/Tracklist/Tracklist.components.js","components/SearchResults/SearchResults.components.js","components/Playlist/Playlist.components.js","utils/Spotify.utils.js","components/App/App.components.js","pages/Landing.pages.js","routes/Main.routes.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","useState","term","setTerm","search","onSearch","window","sessionStorage","getItem","setItem","onKeyDown","key","className","role","value","onChange","target","placeholder","onClick","Track","clicked","setClicked","handleClick","prev","track","name","preview","tabIndex","style","cursor","artist","album","autoPlay","src","isRemoval","onRemove","onAdd","Tracklist","searchResults","map","id","playlistTracks","SearchResults","Playlist","onNameChange","playlistName","onSave","onClear","propType","PropTypes","func","string","array","cryptoRandomString","require","userAccessToken","expiresIn","state","length","type","Spotify","location","href","match","split","Number","history","pushState","setTimeout","accessToken","axios","get","params","q","headers","response","data","tracks","items","artists","uri","preview_url","tracksURIs","then","display_name","user","playlistIdEndpoint","post","playlistId","addTracksEndpoint","App","setPlaylistName","setSearchResults","JSON","parse","setPlaylistTracks","useEffect","stringify","setAccessToken","getSpotifyAccessToken","a","console","log","loading","setLoading","savePlaylist","trackURIs","includes","prevTracks","filter","prevTrack","trackId","prevPlaylistTracks","LandingPage","MainRouter","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bc9f4dd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './SearchBar.components.css';\r\n\r\nexport const SearchBar = props => {\r\n    const [term, setTerm] = useState('');\r\n    const handleTermChange = ({ target }) => {\r\n        setTerm(target.value)\r\n        window.sessionStorage.setItem('term', target.value)\r\n    }\r\n    const search = () => {\r\n        props.onSearch(window.sessionStorage.getItem('term') || term)\r\n        window.sessionStorage.setItem('term', '')\r\n    }\r\n    return (\r\n        <div onKeyDown={({ key }) => key === 'Enter' ? search() : ''} className=\"SearchBar\">\r\n            <input role='searchbox' value={window.sessionStorage.getItem('term') || term} onChange={handleTermChange} placeholder=\"Enter A Song, Album, or Artist\" />\r\n            <button onClick={search} className=\"SearchButton\">SEARCH</button>\r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport './Track.components.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Track = props => {\r\n    const renderAction = () => props.isRemoval ? '-' : '+';\r\n    const addTrack = () => props.onAdd(props.track);\r\n    const removeTrack = () => props.onRemove(props.track)\r\n\r\n    const [clicked, setClicked] = useState(false)\r\n    const handleClick = () => {\r\n        setClicked(prev => !prev)\r\n    }\r\n\r\n    return (\r\n        <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{props.track.name} {props.track.preview &&\r\n                    <small tabIndex={0} role='button' style={{ cursor: \"pointer\" }}\r\n                        onKeyDown={({ key }) => key === 'Enter' ? handleClick() : ''}\r\n                        onClick={handleClick}>{!clicked ? \"| click to preview ▶\" : \"| click to stop preview ⏹\"}\r\n                    </small>}\r\n                </h3>\r\n                <p>{props.track.artist} | {props.track.album}</p>\r\n                {clicked && props.track.preview && <audio autoPlay src={props.track.preview}></audio>}\r\n            </div>\r\n            <button tabIndex={0} className=\"Track-action\" onClick={props.isRemoval ? removeTrack : addTrack}>\r\n                {renderAction()}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nTrack.propTypes = {\r\n    isRemoval: PropTypes.bool,\r\n    track: PropTypes.object,\r\n    onAdd: PropTypes.func,\r\n    onRemove: PropTypes.func\r\n}","import React from 'react';\r\nimport './Tracklist.components.css';\r\nimport { Track } from '../Track/Track.components';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Tracklist = props => {\r\n    return (\r\n        <div className=\"TrackList\">\r\n            {props.searchResults && props.searchResults.map(track => <Track isRemoval={props.isRemoval} onAdd={props.onAdd} key={track.id} track={track} />)}\r\n            {props.playlistTracks && props.playlistTracks.map(track => <Track isRemoval={props.isRemoval} onRemove={props.onRemove} key={track.id} track={track} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nTracklist.propTypes = {\r\n    searchResults: PropTypes.array,\r\n    playlistTracks: PropTypes.array,\r\n    isRemoval: PropTypes.bool,\r\n    onAdd: PropTypes.func,\r\n    onRemove: PropTypes.func\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SearchResults.components.css';\r\nimport { Tracklist } from '../Tracklist/Tracklist.components';\r\n\r\nexport const SearchResults = props => {\r\n    return (\r\n        <section className=\"SearchResults\">\r\n            <h2>Results</h2>\r\n            <Tracklist isRemoval={false} onAdd={props.onAdd} searchResults={props.searchResults} />\r\n        </section>\r\n    )\r\n}\r\n\r\nSearchResults.propTypes = {\r\n    searchResults: PropTypes.array,\r\n    onAdd: PropTypes.func\r\n}","import React from 'react';\r\nimport { Tracklist } from '../Tracklist/Tracklist.components';\r\nimport PropTypes from 'prop-types';\r\nimport './Playlist.components.css';\r\n\r\nexport const Playlist = props => {\r\n    const handleNameChange = ({ target }) => {\r\n        props.onNameChange(target.value);\r\n        window.sessionStorage.setItem('playlistName', target.value)\r\n    }\r\n    return (\r\n        <div className=\"Playlist\">\r\n            <input onChange={handleNameChange} value={window.sessionStorage.getItem('playlistName') || props.playlistName} />\r\n            <Tracklist isRemoval={true} onRemove={props.onRemove} playlistTracks={props.playlistTracks} />\r\n            <button onClick={props.onSave} className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n            <button onClick={props.onClear} className=\"Playlist-clear\">CLEAR PLAYLIST</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nPlaylist.propType = {\r\n    onNameChange: PropTypes.func,\r\n    playlistName: PropTypes.string,\r\n    playlistTracks: PropTypes.array,\r\n    onRemove: PropTypes.func,\r\n    onSave: PropTypes.func,\r\n    onClear: PropTypes.func\r\n}","// import { encode as base64encode } from 'base64-arraybuffer';\r\nimport axios from 'axios';\r\nconst cryptoRandomString = require('crypto-random-string/index');\r\nconst clientID = 'cdef731b0b1440abad772c058cf2ef89';\r\nconst redirectURI = 'http:%2F%2Flocalhost:3000%2F'; //TODO: Change to new deployed location\r\nlet userAccessToken = '';\r\nlet expiresIn = 0;\r\n// let pkceCode = '';\r\n// const codeVerifier = cryptoRandomString({ length: 128 });\r\nconst state = cryptoRandomString({ length: 14, type: 'alphanumeric' });\r\n// const generateCodeChallenge = async codeString => {\r\n//     try {\r\n//         const encoder = new TextEncoder();\r\n//         const data = encoder.encode(codeString);\r\n//         const digest = await window.crypto.subtle.digest(\"SHA-256\", data);\r\n//         const base64Digest = base64encode(digest);\r\n//         return base64Digest.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\")\r\n//     }\r\n//     catch (e) { console.log(e) }\r\n// }\r\n// const codeChallenge = generateCodeChallenge(codeVerifier).then(challenge => challenge);\r\n\r\nexport const Spotify = {\r\n    getAccessToken() {\r\n        if (userAccessToken) {\r\n            return userAccessToken\r\n        } else if (!userAccessToken && window.location.href.match(/access_token=([^&]*)/)) {\r\n            userAccessToken = window.location.href.match(/access_token=([^&]*)/)[0].split(\"=\")[1]\r\n            expiresIn = Number(window.location.href.match(/expires_in=([^&]*)/)[0].split(\"=\")[1]) * 1000;\r\n            window.history.pushState('Access Token', null, '/');\r\n            window.setTimeout(() => userAccessToken = '', expiresIn);\r\n            return userAccessToken\r\n        } else {\r\n            window.location.href = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&state=${state}&scope=playlist-modify-public&redirect_uri=${redirectURI}`\r\n        }\r\n    },\r\n    accessTokenExpires() {\r\n        return expiresIn;\r\n    },\r\n    // getCode() {\r\n    //     if (!window.location.href.match(/code=([^&]*)/)) {\r\n    //         window.location.href = `https://accounts.spotify.com/authorize?response_type=code&state=${state}&scope=user-follow-modify%20playlist-modify-public&client_id=${clientID}&redirect_uri=${redirectURI}&code_challenge=${codeChallenge}&code_challenge_method=S256`\r\n    //     } else {\r\n    //         pkceCode = window.location.href.match(/code=([^&]*)/);\r\n    //         return pkceCode;\r\n    //     }\r\n    // },\r\n    async search(term, accessToken) {\r\n        const endpoint = 'https://api.spotify.com/v1/search';\r\n        const response = await axios.get(endpoint, {\r\n            params: {\r\n                type: 'track',\r\n                q: term\r\n            },\r\n            headers: {\r\n                \"Authorization\": `Bearer ${accessToken}`\r\n            }\r\n        })\r\n        if (!response.data) {\r\n            return []\r\n        } else {\r\n            // return response.data.tracks.items;\r\n            return response.data.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri,\r\n                preview: track.preview_url\r\n            }))\r\n        }\r\n    },\r\n    async savePlaylist(playlistName, tracksURIs, accessToken) {\r\n        let userIdEndpoint = 'https://api.spotify.com/v1/me';\r\n\r\n        const user = await axios.get(userIdEndpoint, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => ({\r\n            id: response.data.id,\r\n            name: response.data.display_name\r\n        }))\r\n        let playlistIdEndpoint = `https://api.spotify.com/v1/users/${user.id}/playlists`;\r\n        const playlistId = await axios.post(playlistIdEndpoint, { name: playlistName }, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${accessToken}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response.data.id);\r\n        let addTracksEndpoint = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\r\n        await axios.post(addTracksEndpoint, {\r\n            \"uris\": tracksURIs\r\n        }, {\r\n            headers: {\r\n                \"Authorization\": `Bearer ${accessToken}`,\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(response => response)\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\nimport { SearchBar } from '../SearchBar/SearchBar.components';\nimport { SearchResults } from '../SearchResults/SearchResults.components';\nimport { Playlist } from '../Playlist/Playlist.components';\nimport './App.components.css';\nimport { Spotify } from '../../utils/Spotify.utils';\n\nexport const App = props => {\n  const [playlistName, setPlaylistName] = useState('New Playlist');\n\n  const updatePlaylistName = name => setPlaylistName(name);\n\n  const [searchResults, setSearchResults] = useState([])\n  const [playlistTracks, setPlaylistTracks] = useState(JSON.parse(window.sessionStorage.getItem('playlistTracks')) || []);\n  useEffect(() => {\n    window.sessionStorage.setItem('playlistTracks', JSON.stringify(playlistTracks));\n    // setPlaylistTracks(JSON.parse(window.sessionStorage.getItem('playlistTracks')))\n  }, [playlistTracks])\n  const addTrack = track => {\n    let newTrack = !playlistTracks.includes(track) ? setPlaylistTracks(prev => [...prev, track]) : setPlaylistTracks(prev => [...prev])\n    setSearchResults(prevTracks => prevTracks.filter(prevTrack => prevTrack !== track))\n  };\n  const removeTrack = track => {\n    const trackId = track.id\n    setPlaylistTracks(prevPlaylistTracks => prevPlaylistTracks.filter(prevTrack => prevTrack.id !== trackId))\n    setSearchResults(prevTracks => [...prevTracks, track])\n  };\n\n  const [accessToken, setAccessToken] = useState('');\n  const getSpotifyAccessToken = () => {\n    setAccessToken(Spotify.getAccessToken())\n    // let tokenExpiresIn = Spotify.accessTokenExpires();\n    // console.log(tokenExpiresIn)\n    let token = window.setTimeout(() => setAccessToken(''), 3000000)\n  }\n  useEffect(() => {\n    getSpotifyAccessToken();\n  }, [accessToken])\n\n  const search = async term => {\n    try {\n      let token = accessToken ? accessToken : getSpotifyAccessToken();\n      const tracks = await Spotify.search(term, accessToken);\n      setSearchResults(tracks)\n    }\n    catch (e) { console.log(e) }\n  };\n\n  const [loading, setLoading] = useState(false);\n  const savePlaylist = async () => {\n    try {\n      setLoading(true);\n      let token = accessToken ? accessToken : getSpotifyAccessToken();\n      const trackURIs = JSON.parse(window.sessionStorage.getItem('playlistTracks')).map(track => track.uri) || playlistTracks.map(track => track.uri);\n      await Spotify.savePlaylist(window.sessionStorage.getItem('playlistName') || playlistName, trackURIs, accessToken);\n      window.sessionStorage.setItem('playlistName', '')\n      setPlaylistName('New Playlist');\n      setPlaylistTracks([]);\n      setLoading(false);\n    }\n    catch (e) { console.log(e) }\n  }\n\n  const clearPlaylist = () => {\n    setPlaylistTracks([])\n  }\n\n\n  return (\n    <section>\n      {loading && <div className=\"pageLoading\">\n        <p>Saving Playlist</p>\n      </div>}\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <p className=\"love\"><small>made with ❤ by Funmilola O.</small></p>\n      <section className=\"App\">\n        <SearchBar onSearch={search} />\n        <div className=\"App-playlist\">\n          <SearchResults searchResults={searchResults} onAdd={addTrack} />\n          <Playlist onNameChange={updatePlaylistName} playlistTracks={playlistTracks} playlistName={playlistName} onRemove={removeTrack} onSave={savePlaylist} onClear={clearPlaylist} />\n        </div>\n      </section>\n    </section>\n  )\n}\n","import { App } from '../components/App/App.components';\r\n\r\nexport const LandingPage = () => {\r\n    return (<App />)\r\n}","import { LandingPage } from '../pages/Landing.pages';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nexport const MainRouter = () => {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path='/' component={LandingPage} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { MainRouter } from './routes/Main.routes';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MainRouter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}